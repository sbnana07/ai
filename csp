
#DOESNT WORK


class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def is_safe(self, vertex, c, color):
        for i in range(self.vertices):
            if self.graph[vertex][i] == 1 and color[i] == c:
                return False
        return True

    def graph_coloring_backtracking(self, m, color, v):
        if v == self.vertices:
            return True

        for c in range(1, m + 1):
            if self.is_safe(v, c, color):
                color[v] = c
                if self.graph_coloring_backtracking(m, color, v + 1):
                    return True
                color[v] = 0

        return False

    def graph_coloring_branch_and_bound(self, m, color, v, min_color):
        if v == self.vertices:
            return True

        for c in range(1, m + 1):
            if self.is_safe(v, c, color):
                color[v] = c
                next_min_color = min_color
                if c > min_color:
                    next_min_color = c
                if self.graph_coloring_branch_and_bound(m, color, v + 1, next_min_color):
                    return True
                color[v] = 0

        return False

    def graph_coloring(self, m, use_branch_and_bound=False):
        color = [0] * self.vertices
        min_color = 1

        if use_branch_and_bound:
            return self.graph_coloring_branch_and_bound(m, color, 0, min_color)
        else:
            return self.graph_coloring_backtracking(m, color, 0)


def get_graph_input():
    vertices = int(input("Enter the number of vertices in the graph: "))
    g = Graph(vertices)

    print("Enter the adjacency matrix (1 for connected, 0 for not connected):")
    for i in range(vertices):
        row = list(map(int, input().split()))
        g.graph[i] = row

    return g


# Example usage with user input:
g = get_graph_input()

colors = int(input("Enter the number of colors: "))
use_branch_and_bound = True  # Set to True for using Branch and Bound, False for Backtracking

if g.graph_coloring(colors, use_branch_and_bound):
    print("Graph can be colored with at most", colors, "colors.")
    print("Color assignment:", g.graph)
else:
    print("Graph cannot be colored with at most", colors, "colors.")
